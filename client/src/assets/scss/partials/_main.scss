mat-table {
  @include layout-bp(xs) {
    overflow-x: scroll;
  }
}

.mat-menu-panel {
  opacity: 0.9;

  button {
    @include flexbox();
    @include flex-direction(row);
    @include align-items(center);
    @include justify-content();
    color: $color_black;
    font-weight: $font_weight_thin;

    mat-icon {
      margin-right: 0.4em !important;
      font-weight: $font_weight_stretch;
      color: $color_secondary !important;
    }

    &:hover {
      background-color: rgba($color_secondary, 0.8) !important;
      color: $color_white;

      mat-icon {
        color: rgba($gradient_color3, 0.6) !important;
      }
    }
  }
}

.mat-paginator-container {
  @include layout-bp(xs) {
    flex-wrap: nowrap !important;
    @include flex-direction(row, true);

    .mat-paginator-page-size {
      align-items: center !important;

      .mat-paginator-page-size-label {
        margin: 0 6px 0 4px;
      }
    }

    .mat-paginator-range-actions {
      .mat-paginator-range-label {
        margin: 0 4px 0 4px;
      }
    }
  }
}

mat-header-row,
mat-row {
  @include layout-bp(xs) {
    width: 190%;
  }
}

html,
body {
  height: 100%;
}

body {
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
  font-size: 14px;
  color: $color_black;
}

a {
  text-decoration: none;
  color: $color_black;
}

a:hover,
a:active {
  color: mat-color($fullstack-primary);
}

.mat-nav-list a.active {
  background: $color_secondary !important;
  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),
    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);

  .label {
    color: $color_white !important;
  }

  mat-icon {
    &.icon {
      color: rgba($color_main, 0.95) !important;
    }
  }
}

.mat-nav-list a:hover {
  background: rgba($color_main, 0.8) !important;
  box-shadow: none;

  .label {
    color: $color_white !important;
  }

  mat-icon {
    &.icon {
      color: $color_secondary !important;
    }
  }
}

mat-sidenav-content {
  &.mat-drawer-content {
    @include flexbox();
    @include flex-direction(column);
  }
}

mat-sidenav {
  width: 30%;
  max-width: 280px;

  @include layout-bp(xs) {
    width: 100vw !important;
    max-width: 100vw !important;
  }

  &.mat-drawer {
    @include layout-bp(xs) {
      border: none !important;
      box-shadow: none !important;
    }

    background: rgba($color_main, 0.95);
    border-style: solid;
    border-width: 0px 2px 0px 0px;
    border-style: solid;
    border-image: linear-gradient(
        to bottom,
        $color_secondary,
        rgba($color_main, 0.7)
      )
      1 100%;
  }
}

mat-sidenav-container,
mat-sidenav-content,
mat-sidenav,
mat-sidenav-container.sidenav-container {
  height: 100%;
}

mat-sidenav-container.sidenav-container {
  background: url('src/assets/images/background.jpg') no-repeat center center;
  background-size: cover;
  height: 100vh !important;
}

mat-toolbar {
  &.main-toolbar {
    position: fixed;
    background: transparent !important;
    position: fixed;
    @include flexbox(true);
    @include flex-direction(row);
    align-items: center;
    z-index:1;
  }

  &.menu {
    border-bottom: 1px solid rgba($color_secondary, 0.7);
    background: rgba($color_secondary, 0.7);
    opacity: 0.6;

    .logo {
      background: url('src/assets/images/logo.png');
      height: 45px;
      width: 45px;
      background-size: 100% 100%;
      margin-right: 0.4em;
    }

    span {
      color: $color_white;
    }
  }
}

// hidden breakpoint classes
@each $modifier, $breakpoint in $map-grid-props {
  @if ($modifier== '') {
    $modifier: '-xs';
  }

  @include create-mq($breakpoint - 1, 'max') {
    .hidden#{$modifier}-down {
      display: none !important;
    }
  }

  @include create-mq($breakpoint, 'min') {
    .hidden#{$modifier}-up {
      display: none !important;
    }
  }
}

.mat-raised-button {
  color: white;
  font-weight: $font_weight_base;
  background-color: $color_secondary;
  border: 1px solid rgba($color_secondary, 0.8) !important;

  mat-icon {
    padding-right: 0.2em;
    font-weight: $font_weight_stretch;
  }

  &:hover {
    background-color: rgba($color_main, 0.8);
    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),
      0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);
  }
}

main {
  // @include flexbox();
  overflow: hidden;
  height: 100%;

  .gradient {
    @include linear-gradient(
      false,
      45deg,
      rgba($gradient_color1, 0.6),
      rgba($gradient_color2, 0.6) 100%
    );
  }

  .mask {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    overflow: hidden;
    width: 100%;
    background-attachment: fixed;
    bottom: 0;
    height: 100vh;
    // z-index: -1;

    @include layout-bp(xs) {
      height: 100vh !important;
    }
  }
}

.container {
  height: 100%;
  max-height: 85vh;
  max-width: map-get($overlapping-gt, 'gt-xs');
  margin: 0 auto;
  font-size: 1em;
  color: $color_black;

  @include layout-bp(xs) {
    max-height: 100vh;
  }

  &--fluid {
    // width: 100%;
    max-width: 100%;
    margin: 0;

    &.main {
      overflow: auto;
      margin-top: $nav_height;

      @include layout-bp(xs) {
        margin-top: 50px !important;
      }
    }
  }

  &__row {
    @include flexbox();
    flex-wrap: wrap;
    width: 100%;

    &.opacity {
      opacity: 0.8;
    }

    &.full-height {
      height: 100%;

      mat-card {
        height: 100%;
      }
    }

    mat-card {
      background-color: $color_white;
      @include flexbox();
      margin-bottom: 1em;
      opacity: 0.8;
      padding: 0.8em 1em 0.4em 1em;
      @include flex-direction(row, true);
    }
  }

  @each $modifier, $breakpoint in $map-grid-props {
    @include create-col-classes($modifier, $grid__cols, $breakpoint);
  }
}

.icon {
  display: inline-block;
  height: 1.9rem;
  margin: 0 auto;
  padding-right: 5px;
  text-align: center;
  vertical-align: middle;
  width: 1.9rem;
  color: rgba($gradient_color2, 0.8);
}

.label {
  color: rgba($gradient_color2, 0.8);
  display: inline-block;
  line-height: 2rem;
  margin: 0;
  width: 85%;
  font-size: 0.9em;
  padding-top: 4px;
}

mat-form-field {
  width: 100%;

  mat-icon {
    width: 100% !important;
    @include flexbox(true);
    justify-content: flex-end;
  }
}

// mat-icon-stepper selected color change
::ng-deep .mat-step-header .mat-step-icon-selected,
.mat-step-header .mat-step-icon-state-done,
.mat-step-header .mat-step-icon-state-edit {
  background-color: rgba($color_secondary, 0.6) !important;
}

//input outline color
::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {
  color: rgba($color_secondary, 0.6) !important;
  // opacity: 1!important;
}

//mat-input focused color
::ng-deep
  .mat-form-field-appearance-outline.mat-focused
  .mat-form-field-outline-thick {
  color: $color_secondary !important;
}

// mat-input error outline color
::ng-deep
  .mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid
  .mat-form-field-outline-thick {
  color: $color_red !important;
  opacity: 0.8 !important;
}

// mat-input carent color
::ng-deep .mat-input-element {
  caret-color: $color_red !important;
}

// mat-input error carent color
::ng-deep .mat-form-field-invalid .mat-input-element,
.mat-warn .mat-input-element {
  caret-color: $color_red !important;
}

// mat-label normal state style
::ng-deep .mat-form-field-label {
  color: rgba($color_secondary, 0.6) !important;
}

// mat-label focused style
::ng-deep .mat-form-field.mat-focused .mat-form-field-label {
  color: $color_secondary !important;
}

// mat-label error style
::ng-deep .mat-form-field.mat-form-field-invalid .mat-form-field-label {
  color: $color_red !important;
}

.mat-form-field-appearance-outline .mat-form-field-outline-thick {
  color: rgba($color_main, 0.6) !important;
}

.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float
  .mat-form-field-label:not(.mat-empty):not(.mat-form-field-empty) {
  color: $color_main;
  font-size: 0.9em !important;
}
